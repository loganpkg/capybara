#!/bin/sh

#
# Copyright (c) 2021, 2023 Logan Ryan McLintock
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

#
# capybara -- file system versioning.
#
#
# Jesus answered, "Those who drink this water will get thirsty again,
# but those who drink the water that I will give them will never be thirsty
# again. The water that I will give them will become in them a spring which
# will provide them with life-giving water and give them eternal life."
#                                                          John 4:13-14 GNT
#
#
# Code based off my code from sloth [version control system]
# (see sloth branch here: https://www.spottexteditor.com).
# merge_media code based on my code from possum [picture and video organiser]
# (see the possum branch of this repo).
#

set -x
set -e
set -u

# SQLite3 settings
dot_settings='/* .echo on */
/* .changes on */
.bail on
.binary on
.mode ascii
.separator "|" "\n"
.headers off
.nullvalue NULL'


usage='Usage:
Unless otherwise stated, all commands need to be run from the source directory:
capybara help
    Print this usage information.
capybara init store_dir
    Sets up the store directory and creates the .capybara_store_location file.
capybara diff snapshot_old snapshot_new
    Summarises the changes between two snapshots.
capybara vacuum
    Removes unreferenced data.
capybara verify
    Checks the data hashes.
capybara merge_media capybara_source_subdir external_media_dir
    Moves photos and videos from external_media_dir into capybara_source_subdir
    and organised them by the exif create date stored inside the files.
capybara log
    Lists the snapshots.
capybara clean_perms
    Resets the permissions of stored files by looking at their content.
capybara checkout snapshot
    Recreates snapshot in the checkout subdirectory of the store directory
    using hard links to the data. Do not edit a checkout or it will corrupt
    the store. Copy what you need elsewhere (preserving metadata).
    This can be run from the source directory or the store directory
    (to allow recovery if the source directory disk fails).
'

# os="$(uname)"



###############################################################################
if [ "$1" = init ]
then

if [ "$#" -ne 2 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

store_dir="$2"

if [ -e "$store_dir" ] || [ -e .capybara_store_location ]
then
    printf '%s: Error: capybara store already exists\n' "$0" 1>&2
    exit 1
fi

printf '%s\n' "$store_dir" > .capybara_store_location

mkdir -p "$store_dir"/data
touch "$store_dir"/.capybara_store

mkdir -p "$store_dir"/snapshot


###############################################################################
elif [ "$1" = diff ]
then

if [ "$#" -ne 3 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

store_dir="$(cat .capybara_store_location)"
snapshot_old="$2"
snapshot_new="$3"

if [ "$snapshot_new" -le "$snapshot_old" ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

cd "$store_dir"/snapshot
if [ ! -f "$snapshot_old" ]
then
    printf '%s: Error: snapshot does not exist: %s\n' "$0" "$snapshot_old" 1>&2
    exit 1
fi

if [ ! -f "$snapshot_new" ]
then
    printf '%s: Error: snapshot does not exist: %s\n' "$0" "$snapshot_new" 1>&2
    exit 1
fi

sqlite3 ':memory:' <<EOF
$dot_settings

CREATE TABLE snapshot_old
(filename TEXT NOT NULL CHECK (filename <> '' AND filename NOT LIKE '%|%'
    AND filename NOT LIKE '%' || x'0A' || '%') UNIQUE PRIMARY KEY,
hash TEXT NOT NULL CHECK (Length(hash) = 128)
);

CREATE TABLE snapshot_new
(filename TEXT NOT NULL CHECK (filename <> '' AND filename NOT LIKE '%|%'
    AND filename NOT LIKE '%' || x'0A' || '%') UNIQUE PRIMARY KEY,
hash TEXT NOT NULL CHECK (Length(hash) = 128)
);

.import $snapshot_old snapshot_old
.import $snapshot_new snapshot_new

SELECT
'New: ' || a.filename
FROM snapshot_new AS a
WHERE
a.filename NOT IN (SELECT b.filename FROM snapshot_old AS b);

SELECT
'Removed: ' || a.filename
FROM snapshot_old AS a
WHERE
a.filename NOT IN (SELECT b.filename FROM snapshot_new AS b);

SELECT
'Modified: ' || a.filename
FROM snapshot_new AS a
INNER JOIN snapshot_old AS b
ON a.filename = b.filename
AND (a.hash <> b.hash);

.quit
EOF


###############################################################################
elif [ "$1" = snapshot ]
then

if [ "$#" -ne 1 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

if [ ! -f .capybara_store_location ]
then
    printf '%s: Error: Not in a capybara search directory\n' "$0" 1>&2
    exit 1
fi

store_dir="$(cat .capybara_store_location)"

snapshot_time="$(date '+%s')"
snapshot_path="$store_dir"/snapshot/"$snapshot_time"

if [ -f "$snapshot_path" ]
then
    printf '%s: Error: snapshot already exists: %s\n' "$0" "$snapshot_time" 1>&2
    exit 1
fi

file_list="$(mktemp)"

find . -type f -print0 > "$file_list"

if grep -E '\|' "$file_list"
then
    printf "%s: Error: Filename contains a pipe char\n" "$0" 1>&2
    rm "$file_list"
    exit 1
fi

if < "$file_list" tr '\n' '|' | grep -E '\|'
then
    printf "%s: Error: Filename contains a newline char\n" "$0" 1>&2
    "$file_list"
    exit 1
fi

rm -rf "$store_dir"/tmp
tmp_dir="$store_dir"/tmp
mkdir "$tmp_dir"
export tmp_dir

< "$file_list" xargs -0 -n 5000 -P 4 sh -c 'sha512sum "$@" >> "$tmp_dir"/"$$".tmp' sh

hash_list="$(mktemp)"
find "$tmp_dir" -type f -exec sed -E 's_^([0-9a-f]{128})  \./(.*)$_\2|\1_' '{}' \; > "$hash_list"

while IFS='|' read -r filename hash
do
    hash_subdir=$(printf '%s' "$hash" | cut -c -2)
    target_dir="$store_dir"/data/"$hash_subdir"
    mkdir -p "$target_dir"
    target_path="$target_dir"/"$hash"
    if [ ! -f "$target_path" ]
    then
        cp "$filename" "$target_path"~
        mv "$target_path"~ "$target_path"
    fi
done < "$hash_list"

cp "$hash_list" "$snapshot_path"~
rm "$file_list" "$hash_list"
mv "$snapshot_path"~ "$snapshot_path"


###############################################################################
elif [ "$1" = vacuum ]
then

if [ "$#" -ne 1 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

store_dir="$(cat .capybara_store_location)"
cd "$store_dir"

hash_list="$(mktemp)"
find snapshot -type f -exec cut -d '|' -f 2 '{}' \; | sort -u > "$hash_list"

rm -rf tmp data2
mkdir data2

while IFS='|' read -r hash
do
    hash_subdir=$(printf '%s' "$hash" | cut -c -2)
    target_dir=data2/"$hash_subdir"
    mkdir -p "$target_dir"
    ln data/"$hash_subdir"/"$hash" "$target_dir"/"$hash"
done < "$hash_list"

rm -rf data "$hash_list"
mv data2 data


###############################################################################
elif [ "$1" = verify ]
then

if [ "$#" -ne 1 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

store_dir="$(cat .capybara_store_location)"

cd "$store_dir/data"

find . -type f ! -name '*~' | sed -E 's_^(.*)/([0-9a-f]{128})$_\2  \1/\2_' \
    | sha512sum -c


###############################################################################
elif [ "$1" = log ]
then

if [ "$#" -ne 1 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

store_dir="$(cat .capybara_store_location)"

ls -lhat "$store_dir"/snapshot

find "$store_dir"/snapshot -type f ! -name '*~' -exec sh -c '
set -x
set -e
set -u
t=$(basename "$1")
d=$(date -d @"$t" "+%Y-%m-%d %H:%M:%S")
printf "%s|%s\n" "$t" "$d"
' sh '{}' \; | sort -r -t '|' -n -k 1,1


###############################################################################
elif [ "$1" = clean_perms ]
then

if [ "$#" -ne 1 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

store_dir="$(cat .capybara_store_location)"

find "$store_dir"/data -type f -exec sh -c \
'set -x
set -e
set -u
fn="$1"
if file "$fn" | grep -E executable
then chmod 700 "$fn"
else chmod 600 "$fn"
fi' sh '{}' \;


###############################################################################
elif [ "$1" = checkout ]
then

if [ "$#" -ne 2 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

snapshot_time="$2"

if [ -e .capybara_store_location ]
then
store_dir="$(cat .capybara_store_location)"
elif [ -e .capybara_store ]
then
store_dir='.'
else
    printf '%s: Error: Not in a capybara search or store directory\n' "$0" 1>&2
    exit 1
fi

if [ ! -f "$store_dir"/snapshot/"$snapshot_time" ]
then
    printf '%s: Error: snapshot does not exist: %s\n' "$0" "$snapshot_time" 1>&2
    exit 1
fi

while IFS='|' read -r filename hash
do
    fn_dir=$(dirname "$filename")
    mkdir -p "$store_dir"/checkout/"$fn_dir"
    hash_subdir=$(printf '%s' "$hash" | cut -c -2)
    ln "$store_dir"/data/"$hash_subdir"/"$hash" "$store_dir"/checkout/"$filename"
done < "$store_dir"/snapshot/"$snapshot_time"


###############################################################################
elif [ "$1" = merge_media ]
then

if [ "$#" -ne 3 ]
then
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi

capybara_source_subdir=$(printf '%s' "$2" | sed -E 's|/+$||')
external_media_dir="$3"

store_dir="$(cat .capybara_store_location)"

if [ ! -d "$external_media_dir" ]
then
    printf '%s: Error: capybara: Could not find external_media_dir: %s\n' \
        "$0" "$external_media_dir" 1>&2
    exit 1
fi

# Rename and move files with exif date
exiftool -r '-FileName<CreateDate' \
    -d "$capybara_source_subdir"'/%Y/%m/%Y_%m_%d_%H_%M_%S%%-c.%%ue' \
    -ext heic -ext jpg -ext jpeg -ext mov -ext mp4 "$external_media_dir"

# Rename and move files without exif date
exiftool -r '-FileName<FileModifyDate' \
    -d "$capybara_source_subdir"'/noexifdate/%Y_%m_%d_%H_%M_%S%%-c.%%ue' \
    -ext heic -ext jpg -ext jpeg -ext mov -ext mp4 "$external_media_dir"

# Delete junk and PNG files
find "$external_media_dir" \
\( -name 'desktop.ini' -o -name '.nomedia' -o -iname '*.AAE' \
-o -iname '*.PNG' \) \
-type f -delete

# Delete empty directories
find "$external_media_dir" -type d -empty -delete

# Remove duplicates
jdupes --recurse --order=name --delete --noprompt "$capybara_source_subdir"


###############################################################################
elif [ "$1" = help ]
then
    printf '%s' "$usage"


###############################################################################
else
    printf '%s: Error: %s' "$0" "$usage" 1>&2
    exit 1
fi
